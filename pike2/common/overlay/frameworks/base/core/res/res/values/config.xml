<?xml version="1.0" encoding="utf-8"?>
<!--
/*
** Copyright 2011, The Android Open Source Project
**
** Licensed under the Apache License, Version 2.0 (the "License");
** you may not use this file except in compliance with the License.
** You may obtain a copy of the License at
**
**     http://www.apache.org/licenses/LICENSE-2.0
**
** Unless required by applicable law or agreed to in writing, software
** distributed under the License is distributed on an "AS IS" BASIS,
** WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
** See the License for the specific language governing permissions and
** limitations under the License.
*/
-->

<!-- These resources are around just to allow their values to be customized
     for different hardware and product builds. -->
<resources>

    <!-- SPRD: Bug813696 do not support sensor hub, disable doze Start -->
    <bool name="config_enableAutoPowerModes">false</bool>
    <!-- SPRD: Add for bug544051 @{ -->
    <add-resource type="bool" name="config_enableDtmfLocalTone" />
    <bool name="config_enableDtmfLocalTone" translatable="false">false</bool>
    <!-- @} -->

    <!-- Minimum screen brightness setting allowed by the power manager.
         The user is forbidden from setting the brightness below this level. -->
    <integer name="config_screenBrightnessSettingMinimum">6</integer>

    <!-- Override the default detection behavior for the framework method
    android.view.ViewConfiguration#hasPermanentMenuKey().
    Valid settings are:
    0 - No change. Use the default autodetection behavior.
    1 - The device DOES have a permanent menu key; ignore autodetection.
    2 - The device DOES NOT have a permanent menu key; ignore autodetection. -->
    <integer name="config_overrideHasPermanentMenuKey">2</integer>

    <!-- List of regexpressions describing the interface (if any) that represent tetherable
         USB interfaces.  If the device doesn't want to support tething over USB this should
         be empty.  An example would be "usb.*" -->
    <string-array translatable="false" name="config_tether_usb_regexs">
        <item>"rndis0"</item>
        <item>"usb0"</item>
    </string-array>

    <!-- List of regexpressions describing the interface (if any) that represent tetherable
         Wifi interfaces.  If the device doesn't want to support tethering over Wifi this
         should be empty.  An example would be "softap.*" -->
    <string-array translatable="false" name="config_tether_wifi_regexs">
            <item>"wlan0"</item>
    </string-array>

    <!-- List of regexpressions describing the interface (if any) that represent tetherable
         bluetooth interfaces.  If the device doesn't want to support tethering over bluetooth this
         should be empty. -->
    <string-array translatable="false" name="config_tether_bluetooth_regexs">
         <item>"bt-pan"</item>
    </string-array>

    <!-- Whether WiFi display is supported by this device.
         There are many prerequisites for this feature to work correctly.
         Here are a few of them:
         * The WiFi radio must support WiFi P2P.
         * The WiFi radio must support concurrent connections to the WiFi display and
         to an access point.
         * The Audio Flinger audio_policy.conf file must specify a rule for the "r_submix"
         remote submix module.  This module is used to record and stream system
         audio output to the WiFi display encoder in the media server.
         * The remote submix module "audio.r_submix.default" must be installed on the device.
         * The device must be provisioned with HDCP keys (for protected content).
    -->
    <bool name="config_enableWifiDisplay">false</bool>

    <!-- SPRD: Bug#474442 Add for Wifi Auto Roam Feature BEG -->
    <!-- Boolean indicating associated network selection is allowed -->
    <bool translatable="false" name="config_wifi_framework_enable_associated_network_selection">false</bool>
    <!-- Add for Wifi Auto Roam Feature END -->

    <!-- SPRD: Bug#602048 Open softap support wps connect mode function on marlin2 chip BEG-->
    <bool name="config_enableSoftApWPS">true</bool>
    <!-- Open softap support wps connect mode function on marlin2 chip END -->

    <!-- modify for performance Bug #665961 begin -->
    <string-array translatable="false" name="config_prfmlock_appstart_name">
       <item>com.tencent.mm</item>
       <item>com.facebook.katana</item>
       <item>com.facebook.orca</item>
       <item>com.imangi.templerun2</item>
    </string-array>

    <string-array translatable="false" name="config_prfmlock_appstart_duration">
       <item>12000</item>
       <item>40000</item>
       <item>50000</item>
       <item>30000</item>
    </string-array>
    <!-- modify for performance Bug #665961 end -->

<!-- modify for release PowerManagerService.Display lock when PSensor to screen off Bug #911340 start -->
    <!-- Indicate whether to allow the device to suspend when the screen is off
         due to the proximity sensor.  This resource should only be set to true
         if the sensor HAL correctly handles the proximity sensor as a wake-up source.
         Otherwise, the device may fail to wake out of suspend reliably.
         The default is false. -->
    <bool name="config_suspendWhenScreenOffDueToProximity">true</bool>
<!-- modify for release PowerManagerService.Display lock when PSensor to screen off Bug #911340 end -->

<!-- modify for battery leds Bug #911338 start -->
<!-- Default value for led color when battery is medium charged -->
    <integer name="config_notificationsBatteryMediumARGB">0xFFFF0000</integer>
<!-- modify for battery leds Bug #911338 end -->

<!-- modify for adaptive brightness Bug #911337 start -->
    <!-- Flag indicating whether the we should enable the automatic brightness in Settings.
         Software implementation will be used if config_hardware_auto_brightness_available is not set -->
    <bool name="config_automatic_brightness_available">true</bool>

    <!-- Array of light sensor LUX values to define our levels for auto backlight brightness support.
         The N entries of this array define N  1 zones as follows:

         Zone 0:        0 <= LUX < array[0]
         Zone 1:        array[0] <= LUX < array[1]
         ...
         Zone N:        array[N - 1] <= LUX < array[N]
         Zone N + 1     array[N] <= LUX < infinity

         Must be overridden in platform specific overlays -->
    <integer-array name="config_autoBrightnessLevels">
        <item>16</item>
        <item>32</item>
        <item>50</item>
        <item>100</item>
        <item>140</item>
        <item>180</item>
        <item>240</item>
        <item>300</item>
        <item>600</item>
        <item>800</item>
        <item>1000</item>
        <item>2000</item>
        <item>3000</item>
        <item>4000</item>
        <item>5000</item>
        <item>6000</item>
        <item>8000</item>
        <item>10000</item>
        <item>20000</item>
    </integer-array>
    <!-- Array of desired screen brightness in nits corresponding to the lux values
         in the config_autoBrightnessLevels array. As with config_screenBrightnessMinimumNits and
         config_screenBrightnessMaximumNits, the display brightness is defined as the measured
         brightness of an all-white image.

         If this is defined then:
            - config_autoBrightnessLcdBacklightValues should not be defined
            - config_screenBrightnessNits must be defined
            - config_screenBrightnessBacklight must be defined

         This array should have size one greater than the size of the config_autoBrightnessLevels
         array. The brightness values must be non-negative and non-decreasing. This must be
         overridden in platform specific overlays -->
    <array name="config_autoBrightnessDisplayValuesNits">
        <item>55.26</item>   <!-- 0-16 -->
        <item>76.5</item>   <!-- 16-32 -->
        <item>97.63</item>  <!-- 32-50 -->
        <item>118.6</item>  <!-- 50-100 -->
        <item>141.5</item>  <!-- 100-140 -->
        <item>162.2</item>  <!-- 140-180 -->
        <item>210.1</item>  <!-- 180-240 -->
        <item>210.1</item>  <!-- 240-300 -->
        <item>210.1</item>  <!-- 300-600 -->
        <item>210.1</item>   <!-- 600-800 -->
        <item>210.1</item>  <!-- 800-1000 -->
        <item>210.1</item>  <!-- 1000-2000 -->
        <item>361.1</item> <!-- 2000-3000 -->
        <item>400.1</item>  <!-- 3000-4000 -->
        <item>418.5</item>  <!-- 4000-5000 -->
        <item>418.5</item>  <!-- 5000-6000 -->
        <item>418.5</item>  <!-- 6000-8000 -->
        <item>418.5</item>  <!-- 8000-10000 -->
        <item>436.3</item>  <!-- 10000-2000 -->
        <item>500.1</item>  <!-- 20000+ -->
    </array>

    <!-- An array describing the screen's backlight values corresponding to the brightness
         values in the config_screenBrightnessNits array.

         This array should be equal in size to config_screenBrightnessBacklight. -->
    <integer-array name="config_screenBrightnessBacklight">
        <item>0</item>
        <item>15</item>
        <item>30</item>
        <item>45</item>
        <item>60</item>
        <item>75</item>
        <item>90</item>
        <item>105</item>
        <item>120</item>
        <item>135</item>
        <item>150</item>
        <item>165</item>
        <item>180</item>
        <item>195</item>
        <item>210</item>
        <item>225</item>
        <item>240</item>
        <item>255</item>
    </integer-array>

    <!-- An array of floats describing the screen brightness in nits corresponding to the backlight
         values in the config_screenBrightnessBacklight array.  On OLED displays these  values
         should be measured with an all white image while the display is in the fully on state.
         Note that this value should *not* reflect the maximum brightness value for any high
         brightness modes but only the maximum brightness value obtainable in a sustainable manner.

         This array should be equal in size to config_screenBrightnessBacklight -->
    <array name="config_screenBrightnessNits">
        <item>0.048</item>
        <item>23.27</item>
        <item>55.26</item>
        <item>87.1</item>
        <item>118.6</item>
        <item>151.9</item>
        <item>182.7</item>
        <item>212.9</item>
        <item>242.9</item>
        <item>274.6</item>
        <item>303.9</item>
        <item>332.7</item>
        <item>361.1</item>
        <item>390.9</item>
        <item>418.5</item>
        <item>445.3</item>
        <item>471.9</item>
        <item>500.1</item>
    </array>
<!-- modify for adaptive brightness Bug #911337 end -->

    <!-- modify for adaptive brightness Bug #909291 start -->
    <!-- Stability requirements in milliseconds for accepting a new brightness level.  This is used
         for debouncing the light sensor.  Different constants are used to debounce the light sensor
         when adapting to brighter or darker environments.  This parameter controls how quickly
         brightness changes occur in response to an observed change in light level that exceeds the
         hysteresis threshold. -->
    <integer name="config_autoBrightnessBrighteningLightDebounce">2000</integer>
    <integer name="config_autoBrightnessDarkeningLightDebounce">4000</integer>
    <!-- modify for adaptive brightness Bug #909291 end -->

    <!-- add for Bug#1153469 -->
    <!-- Fast brightness animation ramp rate in brightness units per second-->
    <integer translatable="false" name="config_brightness_ramp_rate_fast">600</integer>

    <!-- UNISOC: 1078842 enable multi-a2dp/hfp -->
    <integer name="config_bluetooth_max_connected_audio_devices">3</integer>

</resources>
